/**
 * Generate Broker Summaries Script
 *
 * This script reads the full broker data and generates a lightweight
 * summaries file for faster initial loading.
 */

import { writeFileSync, mkdirSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

import { brokers } from '../data/brokers'

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

interface BrokerSummary {
  id: string;
  name: string;
  logoUrl: string;
  websiteUrl: string;
  score: number;
  foundingYear: number;
  headquarters: string;
  description: string;
  rating: number;
  regulation: string[];
  minDeposit: number;
  spreads: {
    eurusd: number;
    gbpusd: number;
    usdjpy: number;
  };
  accessibility: {
    minDeposit: number;
    depositMethods: string[];
    withdrawalMethods: string[];
    customerSupport: string[];
  };
  brokerType: string;
  platforms: string[];
  countries: string[];
  features: string[];
}

function generateBrokerSummaries(): BrokerSummary[] {
  console.log(`üîÑ Generating summaries for ${brokers.length} brokers...`)

  const summaries: BrokerSummary[] = brokers.map(broker => ({
    id: broker.id,
    name: broker.name,
    logoUrl: broker.logoUrl,
    websiteUrl: broker.websiteUrl,
    score: broker.score,
    foundingYear: broker.foundingYear,
    headquarters: broker.headquarters,
    description: broker.description?.substring(0, 200) + (broker.description?.length > 200 ? '...' : ''),
    rating: broker.ratings?.regulation || broker.score || 0,
    regulation: broker.regulation?.regulators || [],
    minDeposit: broker.accessibility?.minDeposit || 0,
    spreads: broker.tradingConditions?.spreads || { eurusd: 0, gbpusd: 0, usdjpy: 0 },
    accessibility: broker.accessibility || {
      minDeposit: 0,
      depositMethods: [],
      withdrawalMethods: [],
      customerSupport: [],
    },
    brokerType: broker.coreInfo?.brokerType || 'Unknown',
    platforms: broker.technology?.platforms || [],
    countries: broker.restrictedCountries ?
      broker.restrictedCountries.map(c => `Not ${c}`) :
      broker.regulation?.regulators.map(r => r.includes('USA') ? 'USA' : r.includes('UK') ? 'UK' : r.includes('AU') ? 'Australia' : 'Global') || [],
    features: [
      ...(broker.technology?.eaSupport ? ['EA Support'] : []),
      ...(broker.technology?.apiAccess ? ['API Access'] : []),
      ...(broker.accountManagement?.islamicAccount?.available ? ['Islamic Account'] : []),
      ...(broker.copyTrading ? ['Copy Trading'] : []),
      ...(broker.isIslamic ? ['Islamic Friendly'] : []),
      ...(broker.providesSignals ? ['Trading Signals'] : []),
    ],
  }))

  console.log(`‚úÖ Generated ${summaries.length} broker summaries`)
  console.log(`üìä Estimated size reduction: ${JSON.stringify(brokers).length} -> ${JSON.stringify(summaries).length} bytes`)

  return summaries
}

function main() {
  try {
    // Create generated directory if it doesn't exist
    const generatedDir = join(__dirname, '../data/generated')
    mkdirSync(generatedDir, { recursive: true })

    // Generate summaries
    const summaries = generateBrokerSummaries()

    // Write to file
    const outputPath = join(generatedDir, 'brokerSummariesGenerated.ts')
    const content = `/**
 * Generated Broker Summaries
 * 
 * This file is auto-generated by scripts/generateBrokerSummaries.ts
 * Do not edit manually - run the script instead.
 * 
 * Generated on: ${new Date().toISOString()}
 */

import type { BrokerSummary } from '../brokerSummaries';

export const brokerSummaries: BrokerSummary[] = ${JSON.stringify(summaries, null, 2)};

export const summariesMetadata = {
  totalCount: ${summaries.length},
  generatedAt: '${new Date().toISOString()}',
  averageScore: ${(summaries.reduce((sum, b) => sum + b.score, 0) / summaries.length).toFixed(2)},
  topRatedBroker: '${summaries.reduce((top, current) => current.score > top.score ? current : top).name}'
};
`

    writeFileSync(outputPath, content, 'utf8')
    console.log(`‚úÖ Broker summaries saved to: ${outputPath}`)

    // Also save as JSON for API consumption
    const jsonPath = join(generatedDir, 'brokerSummaries.json')
    writeFileSync(jsonPath, JSON.stringify(summaries, null, 2), 'utf8')
    console.log(`‚úÖ Broker summaries JSON saved to: ${jsonPath}`)

  } catch (error) {
    console.error('‚ùå Error generating broker summaries:', error)
    process.exit(1)
  }
}

// Run the script
main()

export { generateBrokerSummaries }
